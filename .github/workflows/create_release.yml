on:
  push:
    # Sequence of patterns matched against refs/tags - this will be handy in an acy=tual working enviroment, where we can specify what needs a release and what does not
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset
jobs:
  release-project:
    runs-on: ubuntu-latest
    needs: build-project
    steps:
      - name: Dowload Artifact
        uses: actions/download-artifact@v2
        with:
          name: webpack artifacts
      - name: Zip Project
        uses: thedoctor0/zip-release@master
        with:
          #path: public/
          filename: 'release.zip'
      - name: Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release Version:${{ github.run_number }}
      - name: Upload Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release.zip
          asset_name: game-V${{ github.run_number }}.zip
          asset_content_type: application/zip
  build-project:
    name: Build Project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install NPM dependencies
        run: npm install
      - name: Build project assets
        run: npm run build
      - name: Upload Static
        uses: actions/upload-artifact@main
        with:
          name: webpack artifacts
          path: public/